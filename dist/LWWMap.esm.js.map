{"version":3,"file":"LWWMap.esm.js","sources":["../src/LWWMap.ts"],"sourcesContent":["  import * as Y         from 'yjs'\n  import { Observable } from 'lib0/observable'\n  import md5            from 'blueimp-md5'\n\n  const TimestampFactor = 3000              // expected max. # of changes per ms\n         // however, having even more changes does not break this implementation\n\n  type ChangeLogEntry<T> = {              // represents a change of an LWWMap entry\n    Key:string,\n    Value?:T,\n    Timestamp:number\n  }\n\n// handling of deleted entries:\n// - entries in this.localMap and this.sharedArray with missing \"Value\" property\n//   such entries will be removed \"RetentionPeriod\" ms after deletion\n\n  export class LWWMap<T extends object|boolean|Array<T>|string|number|null|Uint8Array> extends Observable<T> {\n    protected RetentionPeriod:number    // how long to keep deletion log entries\n    protected sharedArray:any  // elements with higher indices where added later\n    protected localMap:Map<string,ChangeLogEntry<T>> // caches validated changes\n    protected lastTimestamp:number       // keeps track of most recent timestamp\n\n    public constructor (\n      sharedArray:Y.Array<{ key: string, val: T }>,\n      RetentionPeriod:number = 30*24*60*60*1000\n    ) {\n      super()\n\n      this.sharedArray = sharedArray       // this is the actually shared object\n\n      this.RetentionPeriod = RetentionPeriod * TimestampFactor\n      this.lastTimestamp   = Date.now()      * TimestampFactor\n\n      this.localMap = new Map<string,ChangeLogEntry<T>>()\n      this._initializeMap()\n\n    /**** \"sharedArray\" is where synchronization happens, observe it ****/\n\n      this.sharedArray.observe(\n        (Event:any,Transaction:any) => this._updateOnChange(Event,Transaction)\n      )\n    }\n\n  /**** @@iterator ****/\n\n    public [Symbol.iterator]():IterableIterator<T> {\n      return (\n        [...this.localMap.entries()]\n        .filter((Entry) => 'Value' in Entry[1])\n        .map((Entry) => [Entry[0],Entry[1].Value])\n      )[Symbol.iterator]() as IterableIterator<T>\n    }\n\n  /**** size ****/\n\n    public get size ():number {\n      let Result:number = 0\n        this.localMap.forEach((loggedEntry:ChangeLogEntry<T>) => {\n          if ('Value' in loggedEntry) { Result++ }\n        })\n      return Result\n    }\n\n  /**** clear ****/\n\n    public clear ():void {\n      if (this.size > 0) {\n        this.sharedArray.doc.transact(() => {\n          this._removeAnyObsoleteDeletions()    // from localMap and sharedArray\n\n          this.sharedArray.delete(0,this.sharedArray.length)\n\n          this.localMap.forEach((loggedEntry:ChangeLogEntry<T>, Key:string) => {\n            if ('Value' in loggedEntry) {\n              this._updateLastTimestampWith(Date.now() * TimestampFactor)\n              let Change:ChangeLogEntry<T> = { Key, Timestamp:this.lastTimestamp }\n\n              this.localMap.set(Key,Change)\n              this.sharedArray.push([Change])\n            } else {\n              this.sharedArray.push([loggedEntry])\n            }\n          })\n        })\n      }\n    }\n\n  /**** delete ****/\n\n    public delete (Key:string):boolean {\n      if (this.localMap.has(Key)) {       // ignore deletions of missing entries\n        this.sharedArray.doc.transact(() => {\n          this._removeAnyLogEntriesForKey(Key)\n          this._removeAnyObsoleteDeletions()\n\n          this._updateLastTimestampWith(Date.now() * TimestampFactor)\n          let Change:ChangeLogEntry<T> = { Key, Timestamp:this.lastTimestamp }\n\n          this.localMap.set(Key,Change)\n          this.sharedArray.push([Change])\n        })\n\n        return true\n      } else {\n        return false\n      }\n    }\n\n  /**** entries ****/\n\n    public entries ():IterableIterator<[string, T]> {\n      const localMapEntries = this.localMap.entries()\n\n      return {\n        [Symbol.iterator]() { return this },       // makes this object iterable\n\n// @ts-ignore TS2322\n        next: ():{ value?:[string,T], done?:boolean } => {\n          let nextEntry = localMapEntries.next()\n          while (! nextEntry.done) {\n            let [Key,loggedChange] = nextEntry.value\n            if ('Value' in loggedChange) {\n              return { value:[Key,loggedChange.Value as T] }\n            } else {\n              nextEntry = localMapEntries.next()\n            }\n          }\n          return { done:true }\n        }\n      }\n    }\n\n  /**** forEach ****/\n\n    public forEach (Callback:(Value:T, Key:string, Map:LWWMap<T>) => void, thisArg?:any):void {\n      this.localMap.forEach((loggedEntry:ChangeLogEntry<T>,Key:string) => {\n        if ('Value' in loggedEntry) {     // ignore entries describing deletions\n          Callback.call(thisArg, loggedEntry.Value as T, Key, this)\n        }\n      })\n    }\n\n  /**** get ****/\n\n    public get (Key:string):T | undefined {\n      return (\n        this.localMap.has(Key)\n        ? (this.localMap.get(Key) as ChangeLogEntry<T>).Value\n        : undefined\n      )\n    }\n\n  /**** has ****/\n\n    public has (Key:string):boolean {\n      return (\n        this.localMap.has(Key) &&\n        ('Value' in (this.localMap.get(Key) as ChangeLogEntry<T>))\n      )\n    }\n\n  /**** keys ****/\n\n    public keys ():IterableIterator<string> {\n      const localMapEntries = this.localMap.entries()\n\n      return {\n        [Symbol.iterator]() { return this },       // makes this object iterable\n\n// @ts-ignore TS2322\n        next: ():{ value?:string, done?:boolean } => {\n          let nextEntry = localMapEntries.next()\n          while (! nextEntry.done) {\n            let [Key,loggedChange] = nextEntry.value\n            if ('Value' in loggedChange) {\n              return { value:Key }\n            } else {\n              nextEntry = localMapEntries.next()\n            }\n          }\n          return { done:true }\n        }\n      }\n    }\n\n  /**** set ****/\n\n    public set (Key:string, Value:T):void {\n      this.sharedArray.doc.transact(() => {\n        this._removeAnyLogEntriesForKey(Key)\n        this._removeAnyObsoleteDeletions()\n\n        this._updateLastTimestampWith(Date.now() * TimestampFactor)\n        let Change = { Key, Value, Timestamp:this.lastTimestamp }\n\n        this.localMap.set(Key,Change)\n        this.sharedArray.push([Change])\n      })\n    }\n\n  /**** values ****/\n\n    public values ():IterableIterator<T> {\n      const localMapEntries = this.localMap.entries()\n\n      return {\n        [Symbol.iterator]() { return this },       // makes this object iterable\n\n// @ts-ignore TS2322\n        next: ():{ value?:T, done?:boolean } => {\n          let nextEntry = localMapEntries.next()\n          while (! nextEntry.done) {\n            let [Key,loggedChange] = nextEntry.value\n            if ('Value' in loggedChange) {\n              return { value:loggedChange.Value as T }\n            } else {\n              nextEntry = localMapEntries.next()\n            }\n          }\n          return { done:true }\n        }\n      }\n    }\n\n  /**** transact ****/\n\n    public transact (Callback:(Transaction:any) => void, Origin?:any):void {\n      this.sharedArray.doc.transact(Callback,Origin)\n    }\n\n  /**** Container ****/\n\n    public get Container ():Y.Array<{ key: string, val: T }> {\n      return this.sharedArray\n    }\n\n  /**** _LogEntryIsBroken ****/\n\n    protected _LogEntryIsBroken (LogEntry:any):boolean {\n      return (\n        (LogEntry == null) ||\n        (typeof LogEntry.Key !== 'string') ||\n        (typeof LogEntry.Timestamp !== 'number') ||\n        ! isFinite(LogEntry.Timestamp) || (LogEntry.Timestamp < 0) ||\n        (Math.floor(LogEntry.Timestamp) !== LogEntry.Timestamp)\n      )\n    }\n\n  /**** _ChangesCollide - is \"firstChange\" newer than \"secondChange\"? ****/\n\n    private _md5Hash (Value:any):string {\n      try {\n        return md5(JSON.stringify(Value))\n      } catch (Signal:any) {\n        return ''\n      }\n    }\n\n    protected _ChangesCollide (\n      firstChange:ChangeLogEntry<T>, secondChange:ChangeLogEntry<T>\n    ):boolean {\n      return (\n        (firstChange.Timestamp > secondChange.Timestamp) ||\n        (\n          (firstChange.Timestamp === secondChange.Timestamp) &&\n          (firstChange.Value !== secondChange.Value) &&\n          (this._md5Hash(firstChange.Value) > this._md5Hash(secondChange.Value))\n        )                // consistent behaviour in case of timestamp collisions\n      )\n    }\n\n  /**** initialize \"localMap\" from \"sharedArray\", remove obsolete array items ****/\n\n    protected _initializeMap ():void {\n      const DeletionSet = new Map()              // keeps track of deletion logs\n\n      const ChangeLog:ChangeLogEntry<T>[] = this.sharedArray.toArray()\n      this.sharedArray.doc.transact(() => {\n        for (let i = ChangeLog.length-1; i >= 0; i--) {// backwards for deletion\n          const loggedChange:ChangeLogEntry<T> = ChangeLog[i]\n\n          const Key          = loggedChange.Key\n          const KeyIsKnown   = this.localMap.has(Key) || DeletionSet.has(Key)\n          const cachedChange = (\n            KeyIsKnown\n            ? this.localMap.get(Key) || DeletionSet.get(Key)\n            : undefined\n          )\n\n          if ('Value' in loggedChange) {// \"loggedChange\" defines existing entry\n            switch (true) {\n              case ! KeyIsKnown:\n                this.localMap.set(Key,loggedChange)\n                this._updateLastTimestampWith(loggedChange.Timestamp)\n                break\n              case this._ChangesCollide(cachedChange,loggedChange):\n                console.warn(\n                  'LWWMap: timestamp mismatch for key \"' + Key + '\"'\n                )\n                this.sharedArray.delete(i)          // remove obsolete log entry\n                break\n              default:      // entry is already known, but its state is outdated\n                DeletionSet.delete(Key)                       // just in case...\n\n                this.localMap.set(Key,loggedChange)\n                this._updateLastTimestampWith(loggedChange.Timestamp)\n            }        // the older ChangeLog entry will persist until next update\n          } else {                     // \"loggedChange\" defines a deleted entry\n            switch (true) {\n              case ! KeyIsKnown:\n                DeletionSet.set(Key,loggedChange)\n                this._updateLastTimestampWith(loggedChange.Timestamp)\n                break\n              case this._ChangesCollide(cachedChange,loggedChange):\n                console.warn(\n                  'LWWMap: timestamp mismatch for key \"' + Key + '\"'\n                )\n                this.sharedArray.delete(i)          // remove obsolete log entry\n                break\n              default:      // entry is already known, but its state is outdated\n                DeletionSet.set(Key,loggedChange)\n\n                this.localMap.delete(Key)                     // just in case...\n                this._updateLastTimestampWith(loggedChange.Timestamp)\n            }        // the older ChangeLog entry will persist until next update\n          }\n        }\n      })\n    }\n\n  /**** apply reported updates - if applicable ****/\n\n    protected _updateOnChange (Event:any,Transaction:any):void {\n      const TransactionLog  = new Map()  // verified updates in this transaction\n      let   TransactionTime = this.lastTimestamp          // temporary timestamp\n      const EventLog        = new Map()           // prepares final change event\n\n    /**** updateTransactionTimeWith ****/\n\n      function updateTransactionTimeWith (newTimestamp:number):void {\n        TransactionTime = Math.max(TransactionTime,newTimestamp)\n        if (TransactionTime >= Number.MAX_SAFE_INTEGER) {\n          throw new TypeError('timestamp has reached the allowed limit')\n        }\n      }\n\n    /**** analyze all updates in this transaction ****/\n\n      const UpdateLog:ChangeLogEntry<T>[] = Array.from(Event.changes.added).map(\n        (addedContent:any) => addedContent.content.getContent()\n      ).flat()                      // updates are appended sharedArray elements\n\n      try {\n        UpdateLog.forEach((loggedUpdate:ChangeLogEntry<T>) => {\n          if (this._LogEntryIsBroken(loggedUpdate)) { return } // skip broken logs\n\n          const Key          = loggedUpdate.Key\n          const KeyIsKnown   = EventLog.has(Key) || this.localMap.has(Key)\n          const cachedUpdate = (\n            KeyIsKnown\n            ? EventLog.get(Key) || this.localMap.get(Key)\n            : undefined\n          )\n\n          switch (true) {\n            case ! ('Value' in loggedUpdate):    // log entry defines a deletion\n              if (KeyIsKnown) {           // actually delete cached entries only\n                if (this._ChangesCollide(cachedUpdate,loggedUpdate)) {\n                \tconsole.warn(\n                \t  'LWWMap: remotely deleted entry was later modified locally',\n                \t  cachedUpdate.Timestamp,loggedUpdate.Timestamp\n                \t)\n                \treturn\n                }\n\n                updateTransactionTimeWith(loggedUpdate.Timestamp)\n\n                TransactionLog.set(Key,loggedUpdate)\n                EventLog.set(Key, {\n                  action:'delete', oldValue:cachedUpdate.Value\n                })\n              }\n              break\n            case KeyIsKnown && this._ChangesCollide(cachedUpdate,loggedUpdate):\n              console.warn(\n                'LWWMap: remote change is outdated',\n                cachedUpdate.Timestamp,loggedUpdate.Timestamp\n              )\n              return\n            default:                                      // everything seems ok\n              updateTransactionTimeWith(loggedUpdate.Timestamp)\n\n              TransactionLog.set(Key,loggedUpdate)\n              if (this.localMap.has(Key)) {             // not just \"KeyIsKnown\"\n                EventLog.set(Key, {\n                  action:'update', oldValue:cachedUpdate.Value, newValue:loggedUpdate.Value\n                })\n              } else {\n                EventLog.set(Key, {\n                  action:'add', newValue:loggedUpdate.Value\n                })\n              }\n          }\n        })\n      } catch (Signal:any) { // refresh affected entries to keep them consistent\n        if (Signal.message.startsWith('Conflict: ')) {\n          const KeysToRefresh   = new Set()\n          const ChangesToDelete = new Set()\n\n          UpdateLog.forEach((loggedUpdate) => {\n            KeysToRefresh.add(loggedUpdate.Key)      // refresh affected entries\n            ChangesToDelete.add(loggedUpdate) // remove inconsistent change logs\n          })\n\n          const ChangeLog:ChangeLogEntry<T>[] = this.sharedArray.toArray()\n          this.sharedArray.doc.transact(() => {\n            const ChangesToRefresh = new Map()\n\n          /**** remove any obsolete ChangeLog entries... ****/\n\n            for (let i = ChangeLog.length-1; i >= 0; i--) {// backw. for deletion\n              let loggedChange = ChangeLog[i]\n              let Key          = loggedChange.Key\n\n              switch (true) {\n                case ChangesToDelete.has(loggedChange):\n                  this.sharedArray.delete(i)\n                  break\n                case KeysToRefresh.has(Key):\n                  if (! ChangesToRefresh.has(Key)) {\n                    ChangesToRefresh.set(Key,loggedChange)\n                  }   // \"ChangesToRefresh\" will only store latest logged change\n                  this.sharedArray.delete(i)\n              }\n            }\n\n          /**** ...and reappend those that should be refreshed ****/\n\n            for (const [Key,loggedChange] of ChangesToRefresh) {\n              this.sharedArray.push([loggedChange])\n            }\n          })\n\n          return                                 // no updates have been applied\n        } else {\n          throw Signal                       // do not swallow \"real\" exceptions\n        }\n      }\n\n    /**** now actually apply any updates ****/\n\n      if (EventLog.size > 0) {\n        for (const [Key,loggedUpdate] of TransactionLog) {\n          this.localMap.set(Key,loggedUpdate)\n        }\n        this.lastTimestamp = TransactionTime\n      }\n\n    /**** finally try to optimize the current ChangeLog ****/\n\n      this._removeAnyBrokenLogEntries()\n      this._removeAnyObsoleteDeletions()\n\n      if (EventLog.size > 0) {\n        const ChangeLog:ChangeLogEntry<T>[] = this.sharedArray.toArray()\n        this.sharedArray.doc.transact(() => {\n          for (let i = ChangeLog.length-1; i >= 0; i--) { // backw. for deletion\n            const loggedChange = ChangeLog[i]\n            const Key          = loggedChange.Key\n            if (EventLog.has(Key) && (EventLog.get(Key).newValue !== loggedChange.Value)) {\n              this.sharedArray.delete(i)\n            }\n          }\n        })\n      }\n\n    /**** it's time to inform the client ****/\n\n      if (EventLog.size > 0) {\n// @ts-ignore TS2339\n        this.emit('change',[EventLog,Transaction])\n      }\n    }\n\n  /**** _removeAnyBrokenLogEntries ****/\n\n    protected _removeAnyBrokenLogEntries ():void {\n      const ChangeLog:any[] = this.sharedArray.toArray()\n      for (let i = ChangeLog.length-1; i >= 0; i--) {\n        const loggedChange:any = ChangeLog[i]\n        if (this._LogEntryIsBroken(loggedChange)) {\n          this.sharedArray.delete(i)\n        }\n      }\n    }\n\n  /**** _removeAnyLogEntriesForKey ****/\n\n    protected _removeAnyLogEntriesForKey (Key:string):void {\n      const ChangeLog:ChangeLogEntry<T>[] = this.sharedArray.toArray()\n      for (let i = ChangeLog.length-1; i >= 0; i--) {\n        const loggedChange:ChangeLogEntry<T> = ChangeLog[i]\n        if (loggedChange.Key === Key) {\n          this.sharedArray.delete(i)\n        }\n      }\n    }\n\n  /**** _removeAnyObsoleteDeletions ****/\n\n    protected _removeAnyObsoleteDeletions ():void {\n      let RetentionTimestamp = Date.now() * TimestampFactor - this.RetentionPeriod\n\n      const ChangeLog:ChangeLogEntry<T>[] = this.sharedArray.toArray()\n      for (let i = ChangeLog.length-1; i >= 0; i--) {\n        const loggedChange:ChangeLogEntry<T> = ChangeLog[i]\n        if (\n          ! ('Value' in loggedChange) &&\n          (loggedChange.Timestamp < RetentionTimestamp)\n        ) {\n          this.localMap.delete(loggedChange.Key)\n          this.sharedArray.delete(i)\n        }\n      }\n    }\n\n  /**** _updateLastTimestampWith ****/\n\n    protected _updateLastTimestampWith (Timestamp:number):void {\n      let newTimestamp:number = Math.max(this.lastTimestamp + 1, Timestamp)\n      if (newTimestamp >= Number.MAX_SAFE_INTEGER) {\n        throw new TypeError('timestamp has reached the allowed limit')\n      } else {\n        this.lastTimestamp = newTimestamp\n      }\n    }\n  }\n"],"names":[],"mappings":";;;AAIE,MAAM,eAAe,GAAG,IAAI,CAAA;AAS9B;AACA;AACA;AAEQ,MAAO,MAAwE,SAAQ,UAAa,CAAA;IAMxG,WACE,CAAA,WAA4C,EAC5C,eAAA,GAAyB,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,IAAI,EAAA;AAEzC,QAAA,KAAK,EAAE,CAAA;AAEP,QAAA,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;AAE9B,QAAA,IAAI,CAAC,eAAe,GAAG,eAAe,GAAG,eAAe,CAAA;QACxD,IAAI,CAAC,aAAa,GAAK,IAAI,CAAC,GAAG,EAAE,GAAQ,eAAe,CAAA;AAExD,QAAA,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAA4B,CAAA;QACnD,IAAI,CAAC,cAAc,EAAE,CAAA;;QAIrB,IAAI,CAAC,WAAW,CAAC,OAAO,CACtB,CAAC,KAAS,EAAC,WAAe,KAAK,IAAI,CAAC,eAAe,CAAC,KAAK,EAAC,WAAW,CAAC,CACvE,CAAA;KACF;;IAIM,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAA;QACtB,OAAO,CACL,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;AAC3B,aAAA,MAAM,CAAC,CAAC,KAAK,KAAK,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;aACtC,GAAG,CAAC,CAAC,KAAK,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAC1C,MAAM,CAAC,QAAQ,CAAC,EAAyB,CAAA;KAC5C;;AAID,IAAA,IAAW,IAAI,GAAA;QACb,IAAI,MAAM,GAAU,CAAC,CAAA;QACnB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,WAA6B,KAAI;YACtD,IAAI,OAAO,IAAI,WAAW,EAAE;AAAE,gBAAA,MAAM,EAAE,CAAA;AAAE,aAAA;AAC1C,SAAC,CAAC,CAAA;AACJ,QAAA,OAAO,MAAM,CAAA;KACd;;IAIM,KAAK,GAAA;AACV,QAAA,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,EAAE;YACjB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAK;AACjC,gBAAA,IAAI,CAAC,2BAA2B,EAAE,CAAA;AAElC,gBAAA,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;gBAElD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,WAA6B,EAAE,GAAU,KAAI;oBAClE,IAAI,OAAO,IAAI,WAAW,EAAE;wBAC1B,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,eAAe,CAAC,CAAA;wBAC3D,IAAI,MAAM,GAAqB,EAAE,GAAG,EAAE,SAAS,EAAC,IAAI,CAAC,aAAa,EAAE,CAAA;wBAEpE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAC,MAAM,CAAC,CAAA;wBAC7B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAA;AAChC,qBAAA;AAAM,yBAAA;wBACL,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,CAAC,CAAA;AACrC,qBAAA;AACH,iBAAC,CAAC,CAAA;AACJ,aAAC,CAAC,CAAA;AACH,SAAA;KACF;;AAIM,IAAA,MAAM,CAAE,GAAU,EAAA;QACvB,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAC1B,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAK;AACjC,gBAAA,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAA;gBACpC,IAAI,CAAC,2BAA2B,EAAE,CAAA;gBAElC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,eAAe,CAAC,CAAA;gBAC3D,IAAI,MAAM,GAAqB,EAAE,GAAG,EAAE,SAAS,EAAC,IAAI,CAAC,aAAa,EAAE,CAAA;gBAEpE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAC,MAAM,CAAC,CAAA;gBAC7B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAA;AACjC,aAAC,CAAC,CAAA;AAEF,YAAA,OAAO,IAAI,CAAA;AACZ,SAAA;AAAM,aAAA;AACL,YAAA,OAAO,KAAK,CAAA;AACb,SAAA;KACF;;IAIM,OAAO,GAAA;QACZ,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAA;QAE/C,OAAO;YACL,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,OAAO,IAAI,CAAA,EAAE;;YAGnC,IAAI,EAAE,MAA0C;AAC9C,gBAAA,IAAI,SAAS,GAAG,eAAe,CAAC,IAAI,EAAE,CAAA;AACtC,gBAAA,OAAO,CAAE,SAAS,CAAC,IAAI,EAAE;oBACvB,IAAI,CAAC,GAAG,EAAC,YAAY,CAAC,GAAG,SAAS,CAAC,KAAK,CAAA;oBACxC,IAAI,OAAO,IAAI,YAAY,EAAE;wBAC3B,OAAO,EAAE,KAAK,EAAC,CAAC,GAAG,EAAC,YAAY,CAAC,KAAU,CAAC,EAAE,CAAA;AAC/C,qBAAA;AAAM,yBAAA;AACL,wBAAA,SAAS,GAAG,eAAe,CAAC,IAAI,EAAE,CAAA;AACnC,qBAAA;AACF,iBAAA;AACD,gBAAA,OAAO,EAAE,IAAI,EAAC,IAAI,EAAE,CAAA;aACrB;SACF,CAAA;KACF;;IAIM,OAAO,CAAE,QAAqD,EAAE,OAAY,EAAA;QACjF,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,WAA6B,EAAC,GAAU,KAAI;AACjE,YAAA,IAAI,OAAO,IAAI,WAAW,EAAE;AAC1B,gBAAA,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,KAAU,EAAE,GAAG,EAAE,IAAI,CAAC,CAAA;AAC1D,aAAA;AACH,SAAC,CAAC,CAAA;KACH;;AAIM,IAAA,GAAG,CAAE,GAAU,EAAA;QACpB,QACE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC;cACnB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAuB,CAAC,KAAK;cACnD,SAAS,EACZ;KACF;;AAIM,IAAA,GAAG,CAAE,GAAU,EAAA;QACpB,QACE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC;AACtB,aAAC,OAAO,IAAK,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAuB,CAAC,EAC3D;KACF;;IAIM,IAAI,GAAA;QACT,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAA;QAE/C,OAAO;YACL,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,OAAO,IAAI,CAAA,EAAE;;YAGnC,IAAI,EAAE,MAAsC;AAC1C,gBAAA,IAAI,SAAS,GAAG,eAAe,CAAC,IAAI,EAAE,CAAA;AACtC,gBAAA,OAAO,CAAE,SAAS,CAAC,IAAI,EAAE;oBACvB,IAAI,CAAC,GAAG,EAAC,YAAY,CAAC,GAAG,SAAS,CAAC,KAAK,CAAA;oBACxC,IAAI,OAAO,IAAI,YAAY,EAAE;AAC3B,wBAAA,OAAO,EAAE,KAAK,EAAC,GAAG,EAAE,CAAA;AACrB,qBAAA;AAAM,yBAAA;AACL,wBAAA,SAAS,GAAG,eAAe,CAAC,IAAI,EAAE,CAAA;AACnC,qBAAA;AACF,iBAAA;AACD,gBAAA,OAAO,EAAE,IAAI,EAAC,IAAI,EAAE,CAAA;aACrB;SACF,CAAA;KACF;;IAIM,GAAG,CAAE,GAAU,EAAE,KAAO,EAAA;QAC7B,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAK;AACjC,YAAA,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAA;YACpC,IAAI,CAAC,2BAA2B,EAAE,CAAA;YAElC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,eAAe,CAAC,CAAA;AAC3D,YAAA,IAAI,MAAM,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,EAAC,IAAI,CAAC,aAAa,EAAE,CAAA;YAEzD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAC,MAAM,CAAC,CAAA;YAC7B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAA;AACjC,SAAC,CAAC,CAAA;KACH;;IAIM,MAAM,GAAA;QACX,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAA;QAE/C,OAAO;YACL,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,OAAO,IAAI,CAAA,EAAE;;YAGnC,IAAI,EAAE,MAAiC;AACrC,gBAAA,IAAI,SAAS,GAAG,eAAe,CAAC,IAAI,EAAE,CAAA;AACtC,gBAAA,OAAO,CAAE,SAAS,CAAC,IAAI,EAAE;oBACvB,IAAI,CAAC,GAAG,EAAC,YAAY,CAAC,GAAG,SAAS,CAAC,KAAK,CAAA;oBACxC,IAAI,OAAO,IAAI,YAAY,EAAE;AAC3B,wBAAA,OAAO,EAAE,KAAK,EAAC,YAAY,CAAC,KAAU,EAAE,CAAA;AACzC,qBAAA;AAAM,yBAAA;AACL,wBAAA,SAAS,GAAG,eAAe,CAAC,IAAI,EAAE,CAAA;AACnC,qBAAA;AACF,iBAAA;AACD,gBAAA,OAAO,EAAE,IAAI,EAAC,IAAI,EAAE,CAAA;aACrB;SACF,CAAA;KACF;;IAIM,QAAQ,CAAE,QAAkC,EAAE,MAAW,EAAA;QAC9D,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAC,MAAM,CAAC,CAAA;KAC/C;;AAID,IAAA,IAAW,SAAS,GAAA;QAClB,OAAO,IAAI,CAAC,WAAW,CAAA;KACxB;;AAIS,IAAA,iBAAiB,CAAE,QAAY,EAAA;AACvC,QAAA,QACE,CAAC,QAAQ,IAAI,IAAI;AACjB,aAAC,OAAO,QAAQ,CAAC,GAAG,KAAK,QAAQ,CAAC;AAClC,aAAC,OAAO,QAAQ,CAAC,SAAS,KAAK,QAAQ,CAAC;AACxC,YAAA,CAAE,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,QAAQ,CAAC,SAAS,GAAG,CAAC,CAAC;AAC1D,aAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,QAAQ,CAAC,SAAS,CAAC,EACxD;KACF;;AAIO,IAAA,QAAQ,CAAE,KAAS,EAAA;QACzB,IAAI;YACF,OAAO,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAA;AAClC,SAAA;AAAC,QAAA,OAAO,MAAU,EAAE;AACnB,YAAA,OAAO,EAAE,CAAA;AACV,SAAA;KACF;IAES,eAAe,CACvB,WAA6B,EAAE,YAA8B,EAAA;QAE7D,QACE,CAAC,WAAW,CAAC,SAAS,GAAG,YAAY,CAAC,SAAS;aAE7C,CAAC,WAAW,CAAC,SAAS,KAAK,YAAY,CAAC,SAAS;AACjD,iBAAC,WAAW,CAAC,KAAK,KAAK,YAAY,CAAC,KAAK,CAAC;iBACzC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CACvE;UACF;KACF;;IAIS,cAAc,GAAA;AACtB,QAAA,MAAM,WAAW,GAAG,IAAI,GAAG,EAAE,CAAA;QAE7B,MAAM,SAAS,GAAuB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAA;QAChE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAK;AACjC,YAAA,KAAK,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AAC5C,gBAAA,MAAM,YAAY,GAAqB,SAAS,CAAC,CAAC,CAAC,CAAA;AAEnD,gBAAA,MAAM,GAAG,GAAY,YAAY,CAAC,GAAG,CAAA;AACrC,gBAAA,MAAM,UAAU,GAAK,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;gBACnE,MAAM,YAAY,IAChB,UAAU;AACV,sBAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC;sBAC9C,SAAS,CACZ,CAAA;AAED,gBAAA,IAAI,OAAO,IAAI,YAAY,EAAE;AAC3B,oBAAA,QAAQ,IAAI;AACV,wBAAA,KAAK,CAAE,UAAU;4BACf,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAC,YAAY,CAAC,CAAA;AACnC,4BAAA,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAA;4BACrD,MAAK;AACP,wBAAA,KAAK,IAAI,CAAC,eAAe,CAAC,YAAY,EAAC,YAAY,CAAC;4BAClD,OAAO,CAAC,IAAI,CACV,sCAAsC,GAAG,GAAG,GAAG,GAAG,CACnD,CAAA;4BACD,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;4BAC1B,MAAK;AACP,wBAAA;AACE,4BAAA,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;4BAEvB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAC,YAAY,CAAC,CAAA;AACnC,4BAAA,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAA;AACxD,qBAAA;AACF,iBAAA;AAAM,qBAAA;AACL,oBAAA,QAAQ,IAAI;AACV,wBAAA,KAAK,CAAE,UAAU;AACf,4BAAA,WAAW,CAAC,GAAG,CAAC,GAAG,EAAC,YAAY,CAAC,CAAA;AACjC,4BAAA,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAA;4BACrD,MAAK;AACP,wBAAA,KAAK,IAAI,CAAC,eAAe,CAAC,YAAY,EAAC,YAAY,CAAC;4BAClD,OAAO,CAAC,IAAI,CACV,sCAAsC,GAAG,GAAG,GAAG,GAAG,CACnD,CAAA;4BACD,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;4BAC1B,MAAK;AACP,wBAAA;AACE,4BAAA,WAAW,CAAC,GAAG,CAAC,GAAG,EAAC,YAAY,CAAC,CAAA;4BAEjC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;AACzB,4BAAA,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAA;AACxD,qBAAA;AACF,iBAAA;AACF,aAAA;AACH,SAAC,CAAC,CAAA;KACH;;IAIS,eAAe,CAAE,KAAS,EAAC,WAAe,EAAA;AAClD,QAAA,MAAM,cAAc,GAAI,IAAI,GAAG,EAAE,CAAA;AACjC,QAAA,IAAM,eAAe,GAAG,IAAI,CAAC,aAAa,CAAA;AAC1C,QAAA,MAAM,QAAQ,GAAU,IAAI,GAAG,EAAE,CAAA;;QAIjC,SAAS,yBAAyB,CAAE,YAAmB,EAAA;YACrD,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,EAAC,YAAY,CAAC,CAAA;AACxD,YAAA,IAAI,eAAe,IAAI,MAAM,CAAC,gBAAgB,EAAE;AAC9C,gBAAA,MAAM,IAAI,SAAS,CAAC,yCAAyC,CAAC,CAAA;AAC/D,aAAA;SACF;;AAID,QAAA,MAAM,SAAS,GAAuB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CACvE,CAAC,YAAgB,KAAK,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,CACxD,CAAC,IAAI,EAAE,CAAA;QAER,IAAI;AACF,YAAA,SAAS,CAAC,OAAO,CAAC,CAAC,YAA8B,KAAI;AACnD,gBAAA,IAAI,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,EAAE;oBAAE,OAAM;AAAE,iBAAA;AAEpD,gBAAA,MAAM,GAAG,GAAY,YAAY,CAAC,GAAG,CAAA;AACrC,gBAAA,MAAM,UAAU,GAAK,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;gBAChE,MAAM,YAAY,IAChB,UAAU;AACV,sBAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC;sBAC3C,SAAS,CACZ,CAAA;AAED,gBAAA,QAAQ,IAAI;AACV,oBAAA,KAAK,EAAG,OAAO,IAAI,YAAY,CAAC;wBAC9B,IAAI,UAAU,EAAE;4BACd,IAAI,IAAI,CAAC,eAAe,CAAC,YAAY,EAAC,YAAY,CAAC,EAAE;AACpD,gCAAA,OAAO,CAAC,IAAI,CACV,2DAA2D,EAC3D,YAAY,CAAC,SAAS,EAAC,YAAY,CAAC,SAAS,CAC9C,CAAA;gCACD,OAAM;AACN,6BAAA;AAED,4BAAA,yBAAyB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAA;AAEjD,4BAAA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAC,YAAY,CAAC,CAAA;AACpC,4BAAA,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE;AAChB,gCAAA,MAAM,EAAC,QAAQ,EAAE,QAAQ,EAAC,YAAY,CAAC,KAAK;AAC7C,6BAAA,CAAC,CAAA;AACH,yBAAA;wBACD,MAAK;oBACP,KAAK,UAAU,IAAI,IAAI,CAAC,eAAe,CAAC,YAAY,EAAC,YAAY,CAAC;AAChE,wBAAA,OAAO,CAAC,IAAI,CACV,mCAAmC,EACnC,YAAY,CAAC,SAAS,EAAC,YAAY,CAAC,SAAS,CAC9C,CAAA;wBACD,OAAM;AACR,oBAAA;AACE,wBAAA,yBAAyB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAA;AAEjD,wBAAA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAC,YAAY,CAAC,CAAA;wBACpC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;AAC1B,4BAAA,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE;AAChB,gCAAA,MAAM,EAAC,QAAQ,EAAE,QAAQ,EAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,EAAC,YAAY,CAAC,KAAK;AAC1E,6BAAA,CAAC,CAAA;AACH,yBAAA;AAAM,6BAAA;AACL,4BAAA,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE;AAChB,gCAAA,MAAM,EAAC,KAAK,EAAE,QAAQ,EAAC,YAAY,CAAC,KAAK;AAC1C,6BAAA,CAAC,CAAA;AACH,yBAAA;AACJ,iBAAA;AACH,aAAC,CAAC,CAAA;AACH,SAAA;QAAC,OAAO,MAAU,EAAE;YACnB,IAAI,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;AAC3C,gBAAA,MAAM,aAAa,GAAK,IAAI,GAAG,EAAE,CAAA;AACjC,gBAAA,MAAM,eAAe,GAAG,IAAI,GAAG,EAAE,CAAA;AAEjC,gBAAA,SAAS,CAAC,OAAO,CAAC,CAAC,YAAY,KAAI;oBACjC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA;AACnC,oBAAA,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;AACnC,iBAAC,CAAC,CAAA;gBAEF,MAAM,SAAS,GAAuB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAA;gBAChE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAK;AACjC,oBAAA,MAAM,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAA;;AAIlC,oBAAA,KAAK,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AAC5C,wBAAA,IAAI,YAAY,GAAG,SAAS,CAAC,CAAC,CAAC,CAAA;AAC/B,wBAAA,IAAI,GAAG,GAAY,YAAY,CAAC,GAAG,CAAA;AAEnC,wBAAA,QAAQ,IAAI;AACV,4BAAA,KAAK,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC;AACpC,gCAAA,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;gCAC1B,MAAK;AACP,4BAAA,KAAK,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC;AACzB,gCAAA,IAAI,CAAE,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;AAC/B,oCAAA,gBAAgB,CAAC,GAAG,CAAC,GAAG,EAAC,YAAY,CAAC,CAAA;AACvC,iCAAA;AACD,gCAAA,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;AAC7B,yBAAA;AACF,qBAAA;;oBAID,KAAK,MAAM,CAAC,GAAG,EAAC,YAAY,CAAC,IAAI,gBAAgB,EAAE;wBACjD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,CAAC,CAAA;AACtC,qBAAA;AACH,iBAAC,CAAC,CAAA;AAEF,gBAAA,OAAM;AACP,aAAA;AAAM,iBAAA;gBACL,MAAM,MAAM,CAAA;AACb,aAAA;AACF,SAAA;;AAID,QAAA,IAAI,QAAQ,CAAC,IAAI,GAAG,CAAC,EAAE;YACrB,KAAK,MAAM,CAAC,GAAG,EAAC,YAAY,CAAC,IAAI,cAAc,EAAE;gBAC/C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAC,YAAY,CAAC,CAAA;AACpC,aAAA;AACD,YAAA,IAAI,CAAC,aAAa,GAAG,eAAe,CAAA;AACrC,SAAA;;QAID,IAAI,CAAC,0BAA0B,EAAE,CAAA;QACjC,IAAI,CAAC,2BAA2B,EAAE,CAAA;AAElC,QAAA,IAAI,QAAQ,CAAC,IAAI,GAAG,CAAC,EAAE;YACrB,MAAM,SAAS,GAAuB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAA;YAChE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAK;AACjC,gBAAA,KAAK,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AAC5C,oBAAA,MAAM,YAAY,GAAG,SAAS,CAAC,CAAC,CAAC,CAAA;AACjC,oBAAA,MAAM,GAAG,GAAY,YAAY,CAAC,GAAG,CAAA;oBACrC,IAAI,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,KAAK,YAAY,CAAC,KAAK,CAAC,EAAE;AAC5E,wBAAA,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;AAC3B,qBAAA;AACF,iBAAA;AACH,aAAC,CAAC,CAAA;AACH,SAAA;;AAID,QAAA,IAAI,QAAQ,CAAC,IAAI,GAAG,CAAC,EAAE;;YAErB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAC,CAAC,QAAQ,EAAC,WAAW,CAAC,CAAC,CAAA;AAC3C,SAAA;KACF;;IAIS,0BAA0B,GAAA;QAClC,MAAM,SAAS,GAAS,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAA;AAClD,QAAA,KAAK,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AAC5C,YAAA,MAAM,YAAY,GAAO,SAAS,CAAC,CAAC,CAAC,CAAA;AACrC,YAAA,IAAI,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,EAAE;AACxC,gBAAA,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;AAC3B,aAAA;AACF,SAAA;KACF;;AAIS,IAAA,0BAA0B,CAAE,GAAU,EAAA;QAC9C,MAAM,SAAS,GAAuB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAA;AAChE,QAAA,KAAK,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AAC5C,YAAA,MAAM,YAAY,GAAqB,SAAS,CAAC,CAAC,CAAC,CAAA;AACnD,YAAA,IAAI,YAAY,CAAC,GAAG,KAAK,GAAG,EAAE;AAC5B,gBAAA,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;AAC3B,aAAA;AACF,SAAA;KACF;;IAIS,2BAA2B,GAAA;AACnC,QAAA,IAAI,kBAAkB,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,eAAe,GAAG,IAAI,CAAC,eAAe,CAAA;QAE5E,MAAM,SAAS,GAAuB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAA;AAChE,QAAA,KAAK,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AAC5C,YAAA,MAAM,YAAY,GAAqB,SAAS,CAAC,CAAC,CAAC,CAAA;AACnD,YAAA,IACE,EAAG,OAAO,IAAI,YAAY,CAAC;AAC3B,iBAAC,YAAY,CAAC,SAAS,GAAG,kBAAkB,CAAC,EAC7C;gBACA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA;AACtC,gBAAA,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;AAC3B,aAAA;AACF,SAAA;KACF;;AAIS,IAAA,wBAAwB,CAAE,SAAgB,EAAA;AAClD,QAAA,IAAI,YAAY,GAAU,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE,SAAS,CAAC,CAAA;AACrE,QAAA,IAAI,YAAY,IAAI,MAAM,CAAC,gBAAgB,EAAE;AAC3C,YAAA,MAAM,IAAI,SAAS,CAAC,yCAAyC,CAAC,CAAA;AAC/D,SAAA;AAAM,aAAA;AACL,YAAA,IAAI,CAAC,aAAa,GAAG,YAAY,CAAA;AAClC,SAAA;KACF;AACF;;;;"}